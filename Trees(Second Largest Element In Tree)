Given a generic tree, find and return the node with second largest value in given tree. Return NULL if no node with required value is present.
Input format :
Elements in level order form separated by space (as per done in class). Order is - 

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element 
Output format:
Second Largest node data
Sample Input 1 :
10 3 20 30 40 2 40 50 0 0 0 0 
Sample Output 1 :
40
__________________________________________
import java.util.*;

public class Solution {

/*	TreeNode structure 
 * 
 * class TreeNode<T> {
		T data;
		ArrayList<TreeNode<T>> children;

		TreeNode(T data){
			this.data = data;
			children = new ArrayList<TreeNode<T>>();
		}
	}*/
	
		
	
	public static TreeNode<Integer> findSecondLargest(TreeNode<Integer> root){


		// Write your code here
        if(root.children.size()==0){
            return null;
        }
        Queue<TreeNode<Integer>>queue=new LinkedList<>();
        TreeNode<Integer>f1=root,s1=null;
        int data=0;
        queue.add(root);
        while(!queue.isEmpty()){
            TreeNode<Integer>frontNode=queue.poll();
            for(int i=0;i<frontNode.children.size();i++){
                queue.add(frontNode.children.get(i));
            }
            if(frontNode.data>data){
                if(frontNode.data>f1.data){
                    s1=f1;
                    data=f1.data;
                    f1=frontNode;
                }
                else if(frontNode.data<f1.data){
                    s1=frontNode;
                    data=s1.data;
                }
            }
        }
        return s1;

	}
	
	
}
